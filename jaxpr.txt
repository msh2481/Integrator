{ lambda ; a:f32[] b:f32[1]. let
    c:f32[1] = pjit[
      name=jax_dxdt
      jaxpr={ lambda ; d:f32[] e:f32[1]. let
          f:i32[] = bitcast_convert_type[new_dtype=int32] d
          g:i32[] = xor f 2
          h:key<fry>[] = random_seed[impl=fry] g
          i:u32[2] = random_unwrap h
          j:key<fry>[] = random_wrap[impl=fry] i
          k:f32[] = pjit[
            name=_normal
            jaxpr={ lambda ; l:key<fry>[]. let
                m:f32[] = pjit[
                  name=_normal_real
                  jaxpr={ lambda ; n:key<fry>[]. let
                      o:f32[] = pjit[
                        name=_uniform
                        jaxpr={ lambda ; p:key<fry>[] q:f32[] r:f32[]. let
                            s:u32[] = random_bits[bit_width=32 shape=()] p
                            t:u32[] = shift_right_logical s 9
                            u:u32[] = or t 1065353216
                            v:f32[] = bitcast_convert_type[new_dtype=float32] u
                            w:f32[] = sub v 1.0
                            x:f32[] = sub r q
                            y:f32[] = mul w x
                            z:f32[] = add y q
                            ba:f32[] = reshape[dimensions=None new_sizes=()] z
                            bb:f32[] = max q ba
                          in (bb,) }
                      ] n -0.9999999403953552 1.0
                      bc:f32[] = erf_inv o
                      bd:f32[] = mul 1.4142135381698608 bc
                    in (bd,) }
                ] l
              in (m,) }
          ] j
          be:f32[] = sqrt 0.001
          bf:f32[] = convert_element_type[new_dtype=float32 weak_type=False] be
          bg:f32[] = div k bf
          bh:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] bg
        in (bh,) }
    ] a b
  in (c,) }
