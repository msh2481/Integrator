{ lambda ; a:f32[] b:f32[2]. let
    c:f32[2] = pjit[
      name=jax_dxdt
      jaxpr={ lambda ; d:f32[] e:f32[2]. let
          f:f32[1] = slice[limit_indices=(2,) start_indices=(1,) strides=None] e
          g:f32[] = squeeze[dimensions=(0,)] f
          h:f32[] = mul 1.0 g
          i:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] h
          j:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0.0
          k:f32[2] = concatenate[dimension=0] i j
        in (k,) }
    ] a b
  in (c,) }
